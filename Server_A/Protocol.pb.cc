// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
constexpr C_ENTER_GAME::C_ENTER_GAME(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rommid_(0){}
struct C_ENTER_GAMEDefaultTypeInternal {
  constexpr C_ENTER_GAMEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ENTER_GAMEDefaultTypeInternal() {}
  union {
    C_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
constexpr S_ENTER_GAME::S_ENTER_GAME(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_(nullptr)
  , roomid_(0){}
struct S_ENTER_GAMEDefaultTypeInternal {
  constexpr S_ENTER_GAMEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ENTER_GAMEDefaultTypeInternal() {}
  union {
    S_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
constexpr C_CREATE_ROOM::C_CREATE_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roompwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_CREATE_ROOMDefaultTypeInternal {
  constexpr C_CREATE_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CREATE_ROOMDefaultTypeInternal() {}
  union {
    C_CREATE_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CREATE_ROOMDefaultTypeInternal _C_CREATE_ROOM_default_instance_;
constexpr S_CREATE_ROOM::S_CREATE_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false)
  , roomid_(0){}
struct S_CREATE_ROOMDefaultTypeInternal {
  constexpr S_CREATE_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CREATE_ROOMDefaultTypeInternal() {}
  union {
    S_CREATE_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CREATE_ROOMDefaultTypeInternal _S_CREATE_ROOM_default_instance_;
constexpr C_ROOM_LIST::C_ROOM_LIST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_ROOM_LISTDefaultTypeInternal {
  constexpr C_ROOM_LISTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ROOM_LISTDefaultTypeInternal() {}
  union {
    C_ROOM_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ROOM_LISTDefaultTypeInternal _C_ROOM_LIST_default_instance_;
constexpr S_LEAVE_GAME::S_LEAVE_GAME(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exit_(false){}
struct S_LEAVE_GAMEDefaultTypeInternal {
  constexpr S_LEAVE_GAMEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LEAVE_GAMEDefaultTypeInternal() {}
  union {
    S_LEAVE_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LEAVE_GAMEDefaultTypeInternal _S_LEAVE_GAME_default_instance_;
constexpr S_SPAWN::S_SPAWN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_(){}
struct S_SPAWNDefaultTypeInternal {
  constexpr S_SPAWNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SPAWNDefaultTypeInternal() {}
  union {
    S_SPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
constexpr S_DESPAWN::S_DESPAWN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objectids_()
  , _objectids_cached_byte_size_(){}
struct S_DESPAWNDefaultTypeInternal {
  constexpr S_DESPAWNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_DESPAWNDefaultTypeInternal() {}
  union {
    S_DESPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
constexpr C_MOVE::C_MOVE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : posinfo_(nullptr){}
struct C_MOVEDefaultTypeInternal {
  constexpr C_MOVEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_MOVEDefaultTypeInternal() {}
  union {
    C_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
constexpr S_MOVE::S_MOVE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : posinfo_(nullptr)
  , objectid_(0){}
struct S_MOVEDefaultTypeInternal {
  constexpr S_MOVEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_MOVEDefaultTypeInternal() {}
  union {
    S_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
constexpr C_SKILL::C_SKILL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct C_SKILLDefaultTypeInternal {
  constexpr C_SKILLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_SKILLDefaultTypeInternal() {}
  union {
    C_SKILL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_SKILLDefaultTypeInternal _C_SKILL_default_instance_;
constexpr S_SKILL::S_SKILL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr)
  , objectid_(0){}
struct S_SKILLDefaultTypeInternal {
  constexpr S_SKILLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SKILLDefaultTypeInternal() {}
  union {
    S_SKILL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SKILLDefaultTypeInternal _S_SKILL_default_instance_;
constexpr S_CHANGEHP::S_CHANGEHP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objectid_(0)
  , hp_(0){}
struct S_CHANGEHPDefaultTypeInternal {
  constexpr S_CHANGEHPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHANGEHPDefaultTypeInternal() {}
  union {
    S_CHANGEHP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHANGEHPDefaultTypeInternal _S_CHANGEHP_default_instance_;
constexpr S_DIE::S_DIE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objectid_(0)
  , attackerid_(0){}
struct S_DIEDefaultTypeInternal {
  constexpr S_DIEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_DIEDefaultTypeInternal() {}
  union {
    S_DIE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_DIEDefaultTypeInternal _S_DIE_default_instance_;
constexpr S_VERIFY::S_VERIFY(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false){}
struct S_VERIFYDefaultTypeInternal {
  constexpr S_VERIFYDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_VERIFYDefaultTypeInternal() {}
  union {
    S_VERIFY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_VERIFYDefaultTypeInternal _S_VERIFY_default_instance_;
constexpr C_VERIFY::C_VERIFY(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : jwt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_VERIFYDefaultTypeInternal {
  constexpr C_VERIFYDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_VERIFYDefaultTypeInternal() {}
  union {
    C_VERIFY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_VERIFYDefaultTypeInternal _C_VERIFY_default_instance_;
constexpr C_MESSAGE::C_MESSAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rommid_(0){}
struct C_MESSAGEDefaultTypeInternal {
  constexpr C_MESSAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_MESSAGEDefaultTypeInternal() {}
  union {
    C_MESSAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_MESSAGEDefaultTypeInternal _C_MESSAGE_default_instance_;
constexpr S_MESSAGE::S_MESSAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rommid_(0){}
struct S_MESSAGEDefaultTypeInternal {
  constexpr S_MESSAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_MESSAGEDefaultTypeInternal() {}
  union {
    S_MESSAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_MESSAGEDefaultTypeInternal _S_MESSAGE_default_instance_;
constexpr OBJECT_INFO::OBJECT_INFO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , posinfo_(nullptr)
  , statinfo_(nullptr)
  , objectid_(0){}
struct OBJECT_INFODefaultTypeInternal {
  constexpr OBJECT_INFODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OBJECT_INFODefaultTypeInternal() {}
  union {
    OBJECT_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OBJECT_INFODefaultTypeInternal _OBJECT_INFO_default_instance_;
constexpr POSITIONINFO::POSITIONINFO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0)

  , movedir_(0)

  , posx_(0)
  , posy_(0){}
struct POSITIONINFODefaultTypeInternal {
  constexpr POSITIONINFODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~POSITIONINFODefaultTypeInternal() {}
  union {
    POSITIONINFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT POSITIONINFODefaultTypeInternal _POSITIONINFO_default_instance_;
constexpr STATINFO::STATINFO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : level_(0)
  , hp_(0)
  , maxhp_(0)
  , attack_(0)
  , speed_(0)
  , totalexp_(0){}
struct STATINFODefaultTypeInternal {
  constexpr STATINFODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~STATINFODefaultTypeInternal() {}
  union {
    STATINFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT STATINFODefaultTypeInternal _STATINFO_default_instance_;
constexpr SkillInfo::SkillInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skillid_(0){}
struct SkillInfoDefaultTypeInternal {
  constexpr SkillInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SkillInfoDefaultTypeInternal() {}
  union {
    SkillInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SkillInfoDefaultTypeInternal _SkillInfo_default_instance_;
}  // namespace Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protocol_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Protocol_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, rommid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, roomname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, roomid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, roomname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM, roomname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM, roompwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM, result_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOM_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOM_LIST, roomname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_GAME, exit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, objectids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, posinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, posinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SKILL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SKILL, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SKILL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SKILL, objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SKILL, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANGEHP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANGEHP, objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANGEHP, hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DIE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DIE, objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DIE, attackerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_VERIFY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_VERIFY, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_VERIFY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_VERIFY, jwt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MESSAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MESSAGE, rommid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MESSAGE, nickname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MESSAGE, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MESSAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MESSAGE, rommid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MESSAGE, nickname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MESSAGE, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::OBJECT_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::OBJECT_INFO, objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::OBJECT_INFO, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::OBJECT_INFO, posinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::OBJECT_INFO, statinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::POSITIONINFO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Protocol::POSITIONINFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::POSITIONINFO, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::POSITIONINFO, movedir_),
  PROTOBUF_FIELD_OFFSET(::Protocol::POSITIONINFO, posx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::POSITIONINFO, posy_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::STATINFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::STATINFO, level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::STATINFO, hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::STATINFO, maxhp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::STATINFO, attack_),
  PROTOBUF_FIELD_OFFSET(::Protocol::STATINFO, speed_),
  PROTOBUF_FIELD_OFFSET(::Protocol::STATINFO, totalexp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::SkillInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::SkillInfo, skillid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::C_ENTER_GAME)},
  { 7, -1, sizeof(::Protocol::S_ENTER_GAME)},
  { 15, -1, sizeof(::Protocol::C_CREATE_ROOM)},
  { 22, -1, sizeof(::Protocol::S_CREATE_ROOM)},
  { 29, -1, sizeof(::Protocol::C_ROOM_LIST)},
  { 35, -1, sizeof(::Protocol::S_LEAVE_GAME)},
  { 41, -1, sizeof(::Protocol::S_SPAWN)},
  { 47, -1, sizeof(::Protocol::S_DESPAWN)},
  { 53, -1, sizeof(::Protocol::C_MOVE)},
  { 59, -1, sizeof(::Protocol::S_MOVE)},
  { 66, -1, sizeof(::Protocol::C_SKILL)},
  { 72, -1, sizeof(::Protocol::S_SKILL)},
  { 79, -1, sizeof(::Protocol::S_CHANGEHP)},
  { 86, -1, sizeof(::Protocol::S_DIE)},
  { 93, -1, sizeof(::Protocol::S_VERIFY)},
  { 99, -1, sizeof(::Protocol::C_VERIFY)},
  { 105, -1, sizeof(::Protocol::C_MESSAGE)},
  { 113, -1, sizeof(::Protocol::S_MESSAGE)},
  { 121, -1, sizeof(::Protocol::OBJECT_INFO)},
  { 130, 139, sizeof(::Protocol::POSITIONINFO)},
  { 143, -1, sizeof(::Protocol::STATINFO)},
  { 154, -1, sizeof(::Protocol::SkillInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_ENTER_GAME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ENTER_GAME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_CREATE_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CREATE_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_ROOM_LIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_LEAVE_GAME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_SPAWN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_DESPAWN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_MOVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_MOVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_SKILL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_SKILL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CHANGEHP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_DIE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_VERIFY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_VERIFY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_MESSAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_MESSAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_OBJECT_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_POSITIONINFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_STATINFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_SkillInfo_default_instance_),
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\"0\n\014C_ENTER_GA"
  "ME\022\016\n\006rommId\030\001 \001(\005\022\020\n\010roomname\030\002 \001(\t\"W\n\014"
  "S_ENTER_GAME\022%\n\006player\030\001 \001(\0132\025.Protocol."
  "OBJECT_INFO\022\016\n\006roomId\030\002 \001(\005\022\020\n\010roomname\030"
  "\003 \001(\t\"2\n\rC_CREATE_ROOM\022\020\n\010roomname\030\001 \001(\t"
  "\022\017\n\007roompwd\030\002 \001(\t\"/\n\rS_CREATE_ROOM\022\016\n\006re"
  "sult\030\001 \001(\010\022\016\n\006roomId\030\002 \001(\005\"\037\n\013C_ROOM_LIS"
  "T\022\020\n\010roomname\030\001 \001(\t\"\034\n\014S_LEAVE_GAME\022\014\n\004e"
  "xit\030\001 \001(\010\"1\n\007S_SPAWN\022&\n\007objects\030\001 \003(\0132\025."
  "Protocol.OBJECT_INFO\"\036\n\tS_DESPAWN\022\021\n\tobj"
  "ectIds\030\001 \003(\005\"1\n\006C_MOVE\022\'\n\007posInfo\030\001 \001(\0132"
  "\026.Protocol.POSITIONINFO\"C\n\006S_MOVE\022\020\n\010obj"
  "ectId\030\001 \001(\005\022\'\n\007posInfo\030\002 \001(\0132\026.Protocol."
  "POSITIONINFO\",\n\007C_SKILL\022!\n\004info\030\001 \001(\0132\023."
  "Protocol.SkillInfo\">\n\007S_SKILL\022\020\n\010objectI"
  "d\030\001 \001(\005\022!\n\004info\030\002 \001(\0132\023.Protocol.SkillIn"
  "fo\"*\n\nS_CHANGEHP\022\020\n\010objectId\030\001 \001(\005\022\n\n\002hp"
  "\030\002 \001(\005\"-\n\005S_DIE\022\020\n\010objectId\030\001 \001(\005\022\022\n\natt"
  "ackerId\030\002 \001(\005\"\032\n\010S_VERIFY\022\016\n\006result\030\001 \001("
  "\010\"\027\n\010C_VERIFY\022\013\n\003jwt\030\001 \001(\t\">\n\tC_MESSAGE\022"
  "\016\n\006rommId\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022\017\n\007mes"
  "sage\030\003 \001(\t\">\n\tS_MESSAGE\022\016\n\006rommId\030\001 \001(\005\022"
  "\020\n\010nickname\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"|\n\013OB"
  "JECT_INFO\022\020\n\010objectId\030\001 \001(\005\022\014\n\004name\030\002 \001("
  "\t\022\'\n\007posInfo\030\003 \001(\0132\026.Protocol.POSITIONIN"
  "FO\022$\n\010statinfo\030\004 \001(\0132\022.Protocol.STATINFO"
  "\"\262\001\n\014POSITIONINFO\022+\n\005state\030\001 \001(\0162\027.Proto"
  "col.CreatureStateH\000\210\001\001\022\'\n\007moveDir\030\002 \001(\0162"
  "\021.Protocol.MoveDirH\001\210\001\001\022\021\n\004posX\030\003 \001(\005H\002\210"
  "\001\001\022\021\n\004posY\030\004 \001(\005H\003\210\001\001B\010\n\006_stateB\n\n\010_move"
  "DirB\007\n\005_posXB\007\n\005_posY\"e\n\010STATINFO\022\r\n\005lev"
  "el\030\001 \001(\005\022\n\n\002hp\030\002 \001(\005\022\r\n\005maxHp\030\003 \001(\005\022\016\n\006a"
  "ttack\030\004 \001(\005\022\r\n\005speed\030\005 \001(\002\022\020\n\010totalExp\030\006"
  " \001(\005\"\034\n\tSkillInfo\022\017\n\007skillId\030\001 \001(\005*\272\002\n\005M"
  "sgId\022\017\n\013Block_value\020\000\022\021\n\014S_Enter_Game\020\351\007"
  "\022\021\n\014S_Leave_Game\020\352\007\022\014\n\007S_Spawn\020\353\007\022\016\n\tS_D"
  "espawn\020\354\007\022\013\n\006C_Move\020\355\007\022\013\n\006S_Move\020\356\007\022\014\n\007C"
  "_Skill\020\357\007\022\014\n\007S_Skill\020\360\007\022\017\n\nS_Changehp\020\361\007"
  "\022\n\n\005S_Die\020\362\007\022\r\n\010S_Verify\020\363\007\022\r\n\010C_Verify\020"
  "\364\007\022\022\n\rC_Create_Room\020\365\007\022\020\n\013C_Room_List\020\366\007"
  "\022\022\n\rS_Create_Room\020\367\007\022\021\n\014C_Enter_Game\020\370\007\022"
  "\016\n\tS_Message\020\371\007\022\016\n\tC_Message\020\372\007*:\n\rCreat"
  "ureState\022\010\n\004IDLE\020\000\022\n\n\006MOVING\020\001\022\t\n\005SKILL\020"
  "\002\022\010\n\004DEAD\020\003*0\n\007MoveDir\022\006\n\002UP\020\000\022\010\n\004DOWN\020\001"
  "\022\010\n\004LEFT\020\002\022\t\n\005RIGHT\020\003*O\n\016GameObjectType\022"
  "\010\n\004NONE\020\000\022\n\n\006PLAYER\020\001\022\013\n\007MONSTER\020\002\022\017\n\013PR"
  "OJECTTILE\020\003\022\t\n\005MAGIC\020\004*R\n\tSkillType\022\016\n\nS"
  "KILL_NONE\020\000\022\016\n\nSKILL_AUTO\020\001\022\024\n\020SKILL_PRO"
  "JECTILE\020\002\022\017\n\013SKILL_MAGIC\020\003b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto = {
  false, false, 1954, descriptor_table_protodef_Protocol_2eproto, "Protocol.proto", 
  &descriptor_table_Protocol_2eproto_once, nullptr, 0, 22,
  schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
  file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto, file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[0];
}
bool MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[1];
}
bool CreatureState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveDir_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[2];
}
bool MoveDir_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[3];
}
bool GameObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[4];
}
bool SkillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class C_ENTER_GAME::_Internal {
 public:
};

C_ENTER_GAME::C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER_GAME)
}
C_ENTER_GAME::C_ENTER_GAME(const C_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomname(), 
      GetArenaForAllocation());
  }
  rommid_ = from.rommid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER_GAME)
}

void C_ENTER_GAME::SharedCtor() {
roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rommid_ = 0;
}

C_ENTER_GAME::~C_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER_GAME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_ENTER_GAME::ArenaDtor(void* object) {
  C_ENTER_GAME* _this = reinterpret_cast< C_ENTER_GAME* >(object);
  (void)_this;
}
void C_ENTER_GAME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ENTER_GAME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER_GAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty();
  rommid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER_GAME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rommId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rommid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roomname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_ENTER_GAME.roomname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ENTER_GAME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER_GAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rommId = 1;
  if (this->rommid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rommid(), target);
  }

  // string roomname = 2;
  if (!this->roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ENTER_GAME.roomname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER_GAME)
  return target;
}

size_t C_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER_GAME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomname = 2;
  if (!this->roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // int32 rommId = 1;
  if (this->rommid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rommid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ENTER_GAME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ENTER_GAME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ENTER_GAME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_ENTER_GAME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_ENTER_GAME)
    MergeFrom(*source);
  }
}

void C_ENTER_GAME::MergeFrom(const C_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.roomname().empty()) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.rommid() != 0) {
    _internal_set_rommid(from._internal_rommid());
  }
}

void C_ENTER_GAME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ENTER_GAME::CopyFrom(const C_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER_GAME::IsInitialized() const {
  return true;
}

void C_ENTER_GAME::InternalSwap(C_ENTER_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomname_, GetArenaForAllocation(),
      &other->roomname_, other->GetArenaForAllocation()
  );
  swap(rommid_, other->rommid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_GAME::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_ENTER_GAME::_Internal {
 public:
  static const ::Protocol::OBJECT_INFO& player(const S_ENTER_GAME* msg);
};

const ::Protocol::OBJECT_INFO&
S_ENTER_GAME::_Internal::player(const S_ENTER_GAME* msg) {
  return *msg->player_;
}
S_ENTER_GAME::S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_GAME)
}
S_ENTER_GAME::S_ENTER_GAME(const S_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    player_ = new ::Protocol::OBJECT_INFO(*from.player_);
  } else {
    player_ = nullptr;
  }
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_GAME)
}

void S_ENTER_GAME::SharedCtor() {
roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&player_)) + sizeof(roomid_));
}

S_ENTER_GAME::~S_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER_GAME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
}

void S_ENTER_GAME::ArenaDtor(void* object) {
  S_ENTER_GAME* _this = reinterpret_cast< S_ENTER_GAME* >(object);
  (void)_this;
}
void S_ENTER_GAME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ENTER_GAME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_GAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  roomid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_GAME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.OBJECT_INFO player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roomname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_ENTER_GAME.roomname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ENTER_GAME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_GAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.OBJECT_INFO player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_roomid(), target);
  }

  // string roomname = 3;
  if (!this->roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ENTER_GAME.roomname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_roomname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_GAME)
  return target;
}

size_t S_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_GAME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomname = 3;
  if (!this->roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // .Protocol.OBJECT_INFO player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ENTER_GAME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ENTER_GAME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ENTER_GAME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ENTER_GAME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ENTER_GAME)
    MergeFrom(*source);
  }
}

void S_ENTER_GAME::MergeFrom(const S_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.roomname().empty()) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.has_player()) {
    _internal_mutable_player()->::Protocol::OBJECT_INFO::MergeFrom(from._internal_player());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
}

void S_ENTER_GAME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ENTER_GAME::CopyFrom(const S_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_GAME::IsInitialized() const {
  return true;
}

void S_ENTER_GAME::InternalSwap(S_ENTER_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomname_, GetArenaForAllocation(),
      &other->roomname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, roomid_)
      + sizeof(S_ENTER_GAME::roomid_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_GAME::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_CREATE_ROOM::_Internal {
 public:
};

C_CREATE_ROOM::C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CREATE_ROOM)
}
C_CREATE_ROOM::C_CREATE_ROOM(const C_CREATE_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomname(), 
      GetArenaForAllocation());
  }
  roompwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roompwd().empty()) {
    roompwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roompwd(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CREATE_ROOM)
}

void C_CREATE_ROOM::SharedCtor() {
roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
roompwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

C_CREATE_ROOM::~C_CREATE_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.C_CREATE_ROOM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_CREATE_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roompwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_CREATE_ROOM::ArenaDtor(void* object) {
  C_CREATE_ROOM* _this = reinterpret_cast< C_CREATE_ROOM* >(object);
  (void)_this;
}
void C_CREATE_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CREATE_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CREATE_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CREATE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty();
  roompwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CREATE_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_CREATE_ROOM.roomname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roompwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_roompwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_CREATE_ROOM.roompwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_CREATE_ROOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CREATE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomname = 1;
  if (!this->roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CREATE_ROOM.roomname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomname(), target);
  }

  // string roompwd = 2;
  if (!this->roompwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roompwd().data(), static_cast<int>(this->_internal_roompwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CREATE_ROOM.roompwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roompwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CREATE_ROOM)
  return target;
}

size_t C_CREATE_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CREATE_ROOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomname = 1;
  if (!this->roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // string roompwd = 2;
  if (!this->roompwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roompwd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_CREATE_ROOM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_CREATE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  const C_CREATE_ROOM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_CREATE_ROOM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_CREATE_ROOM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_CREATE_ROOM)
    MergeFrom(*source);
  }
}

void C_CREATE_ROOM::MergeFrom(const C_CREATE_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CREATE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.roomname().empty()) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (!from.roompwd().empty()) {
    _internal_set_roompwd(from._internal_roompwd());
  }
}

void C_CREATE_ROOM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_CREATE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_CREATE_ROOM::CopyFrom(const C_CREATE_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CREATE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CREATE_ROOM::IsInitialized() const {
  return true;
}

void C_CREATE_ROOM::InternalSwap(C_CREATE_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomname_, GetArenaForAllocation(),
      &other->roomname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roompwd_, GetArenaForAllocation(),
      &other->roompwd_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CREATE_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_CREATE_ROOM::_Internal {
 public:
};

S_CREATE_ROOM::S_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CREATE_ROOM)
}
S_CREATE_ROOM::S_CREATE_ROOM(const S_CREATE_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CREATE_ROOM)
}

void S_CREATE_ROOM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(roomid_));
}

S_CREATE_ROOM::~S_CREATE_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_CREATE_ROOM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CREATE_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CREATE_ROOM::ArenaDtor(void* object) {
  S_CREATE_ROOM* _this = reinterpret_cast< S_CREATE_ROOM* >(object);
  (void)_this;
}
void S_CREATE_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CREATE_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CREATE_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CREATE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(roomid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CREATE_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CREATE_ROOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CREATE_ROOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CREATE_ROOM)
  return target;
}

size_t S_CREATE_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CREATE_ROOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CREATE_ROOM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CREATE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CREATE_ROOM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CREATE_ROOM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CREATE_ROOM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CREATE_ROOM)
    MergeFrom(*source);
  }
}

void S_CREATE_ROOM::MergeFrom(const S_CREATE_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CREATE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
}

void S_CREATE_ROOM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CREATE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CREATE_ROOM::CopyFrom(const S_CREATE_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CREATE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CREATE_ROOM::IsInitialized() const {
  return true;
}

void S_CREATE_ROOM::InternalSwap(S_CREATE_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CREATE_ROOM, roomid_)
      + sizeof(S_CREATE_ROOM::roomid_)
      - PROTOBUF_FIELD_OFFSET(S_CREATE_ROOM, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CREATE_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C_ROOM_LIST::_Internal {
 public:
};

C_ROOM_LIST::C_ROOM_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ROOM_LIST)
}
C_ROOM_LIST::C_ROOM_LIST(const C_ROOM_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ROOM_LIST)
}

void C_ROOM_LIST::SharedCtor() {
roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

C_ROOM_LIST::~C_ROOM_LIST() {
  // @@protoc_insertion_point(destructor:Protocol.C_ROOM_LIST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ROOM_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_ROOM_LIST::ArenaDtor(void* object) {
  C_ROOM_LIST* _this = reinterpret_cast< C_ROOM_LIST* >(object);
  (void)_this;
}
void C_ROOM_LIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ROOM_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ROOM_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ROOM_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ROOM_LIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_ROOM_LIST.roomname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ROOM_LIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ROOM_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomname = 1;
  if (!this->roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ROOM_LIST.roomname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ROOM_LIST)
  return target;
}

size_t C_ROOM_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ROOM_LIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomname = 1;
  if (!this->roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ROOM_LIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_ROOM_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ROOM_LIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ROOM_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_ROOM_LIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_ROOM_LIST)
    MergeFrom(*source);
  }
}

void C_ROOM_LIST::MergeFrom(const C_ROOM_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ROOM_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.roomname().empty()) {
    _internal_set_roomname(from._internal_roomname());
  }
}

void C_ROOM_LIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_ROOM_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ROOM_LIST::CopyFrom(const C_ROOM_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ROOM_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ROOM_LIST::IsInitialized() const {
  return true;
}

void C_ROOM_LIST::InternalSwap(C_ROOM_LIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomname_, GetArenaForAllocation(),
      &other->roomname_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ROOM_LIST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_LEAVE_GAME::_Internal {
 public:
};

S_LEAVE_GAME::S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LEAVE_GAME)
}
S_LEAVE_GAME::S_LEAVE_GAME(const S_LEAVE_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exit_ = from.exit_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LEAVE_GAME)
}

void S_LEAVE_GAME::SharedCtor() {
exit_ = false;
}

S_LEAVE_GAME::~S_LEAVE_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_LEAVE_GAME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_LEAVE_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LEAVE_GAME::ArenaDtor(void* object) {
  S_LEAVE_GAME* _this = reinterpret_cast< S_LEAVE_GAME* >(object);
  (void)_this;
}
void S_LEAVE_GAME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LEAVE_GAME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LEAVE_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LEAVE_GAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exit_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LEAVE_GAME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool exit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_LEAVE_GAME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LEAVE_GAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exit = 1;
  if (this->exit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_exit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LEAVE_GAME)
  return target;
}

size_t S_LEAVE_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LEAVE_GAME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool exit = 1;
  if (this->exit() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_LEAVE_GAME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_LEAVE_GAME)
  GOOGLE_DCHECK_NE(&from, this);
  const S_LEAVE_GAME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_LEAVE_GAME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_LEAVE_GAME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_LEAVE_GAME)
    MergeFrom(*source);
  }
}

void S_LEAVE_GAME::MergeFrom(const S_LEAVE_GAME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LEAVE_GAME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exit() != 0) {
    _internal_set_exit(from._internal_exit());
  }
}

void S_LEAVE_GAME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_LEAVE_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_LEAVE_GAME::CopyFrom(const S_LEAVE_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LEAVE_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LEAVE_GAME::IsInitialized() const {
  return true;
}

void S_LEAVE_GAME::InternalSwap(S_LEAVE_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(exit_, other->exit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LEAVE_GAME::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_SPAWN::_Internal {
 public:
};

S_SPAWN::S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWN)
}
S_SPAWN::S_SPAWN(const S_SPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWN)
}

void S_SPAWN::SharedCtor() {
}

S_SPAWN::~S_SPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SPAWN::ArenaDtor(void* object) {
  S_SPAWN* _this = reinterpret_cast< S_SPAWN* >(object);
  (void)_this;
}
void S_SPAWN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SPAWN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.OBJECT_INFO objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SPAWN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.OBJECT_INFO objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWN)
  return target;
}

size_t S_SPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.OBJECT_INFO objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SPAWN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_SPAWN)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SPAWN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SPAWN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_SPAWN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_SPAWN)
    MergeFrom(*source);
  }
}

void S_SPAWN::MergeFrom(const S_SPAWN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
}

void S_SPAWN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SPAWN::CopyFrom(const S_SPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWN::IsInitialized() const {
  return true;
}

void S_SPAWN::InternalSwap(S_SPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_DESPAWN::_Internal {
 public:
};

S_DESPAWN::S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objectids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DESPAWN)
}
S_DESPAWN::S_DESPAWN(const S_DESPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objectids_(from.objectids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DESPAWN)
}

void S_DESPAWN::SharedCtor() {
}

S_DESPAWN::~S_DESPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_DESPAWN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_DESPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DESPAWN::ArenaDtor(void* object) {
  S_DESPAWN* _this = reinterpret_cast< S_DESPAWN* >(object);
  (void)_this;
}
void S_DESPAWN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_DESPAWN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DESPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DESPAWN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objectids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DESPAWN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 objectIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_objectids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_objectids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_DESPAWN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DESPAWN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 objectIds = 1;
  {
    int byte_size = _objectids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_objectids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DESPAWN)
  return target;
}

size_t S_DESPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DESPAWN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 objectIds = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->objectids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _objectids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_DESPAWN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_DESPAWN)
  GOOGLE_DCHECK_NE(&from, this);
  const S_DESPAWN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_DESPAWN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_DESPAWN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_DESPAWN)
    MergeFrom(*source);
  }
}

void S_DESPAWN::MergeFrom(const S_DESPAWN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DESPAWN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objectids_.MergeFrom(from.objectids_);
}

void S_DESPAWN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_DESPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_DESPAWN::CopyFrom(const S_DESPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DESPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DESPAWN::IsInitialized() const {
  return true;
}

void S_DESPAWN::InternalSwap(S_DESPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objectids_.InternalSwap(&other->objectids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DESPAWN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class C_MOVE::_Internal {
 public:
  static const ::Protocol::POSITIONINFO& posinfo(const C_MOVE* msg);
};

const ::Protocol::POSITIONINFO&
C_MOVE::_Internal::posinfo(const C_MOVE* msg) {
  return *msg->posinfo_;
}
C_MOVE::C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MOVE)
}
C_MOVE::C_MOVE(const C_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_posinfo()) {
    posinfo_ = new ::Protocol::POSITIONINFO(*from.posinfo_);
  } else {
    posinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MOVE)
}

void C_MOVE::SharedCtor() {
posinfo_ = nullptr;
}

C_MOVE::~C_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.C_MOVE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete posinfo_;
}

void C_MOVE::ArenaDtor(void* object) {
  C_MOVE* _this = reinterpret_cast< C_MOVE* >(object);
  (void)_this;
}
void C_MOVE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_MOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MOVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.POSITIONINFO posInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_MOVE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.POSITIONINFO posInfo = 1;
  if (this->has_posinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::posinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MOVE)
  return target;
}

size_t C_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MOVE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.POSITIONINFO posInfo = 1;
  if (this->has_posinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_MOVE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  const C_MOVE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_MOVE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_MOVE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_MOVE)
    MergeFrom(*source);
  }
}

void C_MOVE::MergeFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_posinfo()) {
    _internal_mutable_posinfo()->::Protocol::POSITIONINFO::MergeFrom(from._internal_posinfo());
  }
}

void C_MOVE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_MOVE::CopyFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MOVE::IsInitialized() const {
  return true;
}

void C_MOVE::InternalSwap(C_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(posinfo_, other->posinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MOVE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class S_MOVE::_Internal {
 public:
  static const ::Protocol::POSITIONINFO& posinfo(const S_MOVE* msg);
};

const ::Protocol::POSITIONINFO&
S_MOVE::_Internal::posinfo(const S_MOVE* msg) {
  return *msg->posinfo_;
}
S_MOVE::S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MOVE)
}
S_MOVE::S_MOVE(const S_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_posinfo()) {
    posinfo_ = new ::Protocol::POSITIONINFO(*from.posinfo_);
  } else {
    posinfo_ = nullptr;
  }
  objectid_ = from.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MOVE)
}

void S_MOVE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&posinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objectid_) -
    reinterpret_cast<char*>(&posinfo_)) + sizeof(objectid_));
}

S_MOVE::~S_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.S_MOVE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete posinfo_;
}

void S_MOVE::ArenaDtor(void* object) {
  S_MOVE* _this = reinterpret_cast< S_MOVE* >(object);
  (void)_this;
}
void S_MOVE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_MOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
  objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MOVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.POSITIONINFO posInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_MOVE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // .Protocol.POSITIONINFO posInfo = 2;
  if (this->has_posinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::posinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MOVE)
  return target;
}

size_t S_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MOVE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.POSITIONINFO posInfo = 2;
  if (this->has_posinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posinfo_);
  }

  // int32 objectId = 1;
  if (this->objectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_objectid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_MOVE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_MOVE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_MOVE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_MOVE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_MOVE)
    MergeFrom(*source);
  }
}

void S_MOVE::MergeFrom(const S_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_posinfo()) {
    _internal_mutable_posinfo()->::Protocol::POSITIONINFO::MergeFrom(from._internal_posinfo());
  }
  if (from.objectid() != 0) {
    _internal_set_objectid(from._internal_objectid());
  }
}

void S_MOVE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_MOVE::CopyFrom(const S_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MOVE::IsInitialized() const {
  return true;
}

void S_MOVE::InternalSwap(S_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MOVE, objectid_)
      + sizeof(S_MOVE::objectid_)
      - PROTOBUF_FIELD_OFFSET(S_MOVE, posinfo_)>(
          reinterpret_cast<char*>(&posinfo_),
          reinterpret_cast<char*>(&other->posinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MOVE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class C_SKILL::_Internal {
 public:
  static const ::Protocol::SkillInfo& info(const C_SKILL* msg);
};

const ::Protocol::SkillInfo&
C_SKILL::_Internal::info(const C_SKILL* msg) {
  return *msg->info_;
}
C_SKILL::C_SKILL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SKILL)
}
C_SKILL::C_SKILL(const C_SKILL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::Protocol::SkillInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SKILL)
}

void C_SKILL::SharedCtor() {
info_ = nullptr;
}

C_SKILL::~C_SKILL() {
  // @@protoc_insertion_point(destructor:Protocol.C_SKILL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_SKILL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void C_SKILL::ArenaDtor(void* object) {
  C_SKILL* _this = reinterpret_cast< C_SKILL* >(object);
  (void)_this;
}
void C_SKILL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_SKILL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_SKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SKILL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SKILL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.SkillInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_SKILL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SKILL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.SkillInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SKILL)
  return target;
}

size_t C_SKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SKILL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SkillInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_SKILL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  const C_SKILL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_SKILL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_SKILL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_SKILL)
    MergeFrom(*source);
  }
}

void C_SKILL::MergeFrom(const C_SKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::Protocol::SkillInfo::MergeFrom(from._internal_info());
  }
}

void C_SKILL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_SKILL::CopyFrom(const C_SKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SKILL::IsInitialized() const {
  return true;
}

void C_SKILL::InternalSwap(C_SKILL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SKILL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class S_SKILL::_Internal {
 public:
  static const ::Protocol::SkillInfo& info(const S_SKILL* msg);
};

const ::Protocol::SkillInfo&
S_SKILL::_Internal::info(const S_SKILL* msg) {
  return *msg->info_;
}
S_SKILL::S_SKILL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SKILL)
}
S_SKILL::S_SKILL(const S_SKILL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::Protocol::SkillInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  objectid_ = from.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SKILL)
}

void S_SKILL::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objectid_) -
    reinterpret_cast<char*>(&info_)) + sizeof(objectid_));
}

S_SKILL::~S_SKILL() {
  // @@protoc_insertion_point(destructor:Protocol.S_SKILL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SKILL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void S_SKILL::ArenaDtor(void* object) {
  S_SKILL* _this = reinterpret_cast< S_SKILL* >(object);
  (void)_this;
}
void S_SKILL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SKILL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SKILL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SKILL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.SkillInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SKILL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SKILL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // .Protocol.SkillInfo info = 2;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SKILL)
  return target;
}

size_t S_SKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SKILL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SkillInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 objectId = 1;
  if (this->objectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_objectid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SKILL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SKILL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SKILL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_SKILL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_SKILL)
    MergeFrom(*source);
  }
}

void S_SKILL::MergeFrom(const S_SKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::Protocol::SkillInfo::MergeFrom(from._internal_info());
  }
  if (from.objectid() != 0) {
    _internal_set_objectid(from._internal_objectid());
  }
}

void S_SKILL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SKILL::CopyFrom(const S_SKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SKILL::IsInitialized() const {
  return true;
}

void S_SKILL::InternalSwap(S_SKILL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SKILL, objectid_)
      + sizeof(S_SKILL::objectid_)
      - PROTOBUF_FIELD_OFFSET(S_SKILL, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SKILL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class S_CHANGEHP::_Internal {
 public:
};

S_CHANGEHP::S_CHANGEHP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHANGEHP)
}
S_CHANGEHP::S_CHANGEHP(const S_CHANGEHP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&objectid_, &from.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&objectid_)) + sizeof(hp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHANGEHP)
}

void S_CHANGEHP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&objectid_)) + sizeof(hp_));
}

S_CHANGEHP::~S_CHANGEHP() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHANGEHP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CHANGEHP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CHANGEHP::ArenaDtor(void* object) {
  S_CHANGEHP* _this = reinterpret_cast< S_CHANGEHP* >(object);
  (void)_this;
}
void S_CHANGEHP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHANGEHP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHANGEHP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHANGEHP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_) -
      reinterpret_cast<char*>(&objectid_)) + sizeof(hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHANGEHP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CHANGEHP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHANGEHP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHANGEHP)
  return target;
}

size_t S_CHANGEHP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHANGEHP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->objectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_objectid());
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CHANGEHP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CHANGEHP)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CHANGEHP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CHANGEHP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CHANGEHP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CHANGEHP)
    MergeFrom(*source);
  }
}

void S_CHANGEHP::MergeFrom(const S_CHANGEHP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHANGEHP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.objectid() != 0) {
    _internal_set_objectid(from._internal_objectid());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
}

void S_CHANGEHP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CHANGEHP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CHANGEHP::CopyFrom(const S_CHANGEHP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHANGEHP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHANGEHP::IsInitialized() const {
  return true;
}

void S_CHANGEHP::InternalSwap(S_CHANGEHP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CHANGEHP, hp_)
      + sizeof(S_CHANGEHP::hp_)
      - PROTOBUF_FIELD_OFFSET(S_CHANGEHP, objectid_)>(
          reinterpret_cast<char*>(&objectid_),
          reinterpret_cast<char*>(&other->objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHANGEHP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class S_DIE::_Internal {
 public:
};

S_DIE::S_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DIE)
}
S_DIE::S_DIE(const S_DIE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&objectid_, &from.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&attackerid_) -
    reinterpret_cast<char*>(&objectid_)) + sizeof(attackerid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DIE)
}

void S_DIE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attackerid_) -
    reinterpret_cast<char*>(&objectid_)) + sizeof(attackerid_));
}

S_DIE::~S_DIE() {
  // @@protoc_insertion_point(destructor:Protocol.S_DIE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_DIE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DIE::ArenaDtor(void* object) {
  S_DIE* _this = reinterpret_cast< S_DIE* >(object);
  (void)_this;
}
void S_DIE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_DIE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DIE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DIE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attackerid_) -
      reinterpret_cast<char*>(&objectid_)) + sizeof(attackerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DIE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attackerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          attackerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_DIE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DIE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // int32 attackerId = 2;
  if (this->attackerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attackerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DIE)
  return target;
}

size_t S_DIE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DIE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->objectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_objectid());
  }

  // int32 attackerId = 2;
  if (this->attackerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attackerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_DIE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_DIE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_DIE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_DIE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_DIE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_DIE)
    MergeFrom(*source);
  }
}

void S_DIE::MergeFrom(const S_DIE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DIE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.objectid() != 0) {
    _internal_set_objectid(from._internal_objectid());
  }
  if (from.attackerid() != 0) {
    _internal_set_attackerid(from._internal_attackerid());
  }
}

void S_DIE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_DIE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_DIE::CopyFrom(const S_DIE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DIE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DIE::IsInitialized() const {
  return true;
}

void S_DIE::InternalSwap(S_DIE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_DIE, attackerid_)
      + sizeof(S_DIE::attackerid_)
      - PROTOBUF_FIELD_OFFSET(S_DIE, objectid_)>(
          reinterpret_cast<char*>(&objectid_),
          reinterpret_cast<char*>(&other->objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DIE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class S_VERIFY::_Internal {
 public:
};

S_VERIFY::S_VERIFY(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_VERIFY)
}
S_VERIFY::S_VERIFY(const S_VERIFY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_VERIFY)
}

void S_VERIFY::SharedCtor() {
result_ = false;
}

S_VERIFY::~S_VERIFY() {
  // @@protoc_insertion_point(destructor:Protocol.S_VERIFY)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_VERIFY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_VERIFY::ArenaDtor(void* object) {
  S_VERIFY* _this = reinterpret_cast< S_VERIFY* >(object);
  (void)_this;
}
void S_VERIFY::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_VERIFY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_VERIFY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_VERIFY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_VERIFY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_VERIFY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_VERIFY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_VERIFY)
  return target;
}

size_t S_VERIFY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_VERIFY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_VERIFY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_VERIFY)
  GOOGLE_DCHECK_NE(&from, this);
  const S_VERIFY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_VERIFY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_VERIFY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_VERIFY)
    MergeFrom(*source);
  }
}

void S_VERIFY::MergeFrom(const S_VERIFY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_VERIFY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void S_VERIFY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_VERIFY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_VERIFY::CopyFrom(const S_VERIFY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_VERIFY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_VERIFY::IsInitialized() const {
  return true;
}

void S_VERIFY::InternalSwap(S_VERIFY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_VERIFY::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class C_VERIFY::_Internal {
 public:
};

C_VERIFY::C_VERIFY(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_VERIFY)
}
C_VERIFY::C_VERIFY(const C_VERIFY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  jwt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jwt().empty()) {
    jwt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_jwt(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_VERIFY)
}

void C_VERIFY::SharedCtor() {
jwt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

C_VERIFY::~C_VERIFY() {
  // @@protoc_insertion_point(destructor:Protocol.C_VERIFY)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_VERIFY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  jwt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_VERIFY::ArenaDtor(void* object) {
  C_VERIFY* _this = reinterpret_cast< C_VERIFY* >(object);
  (void)_this;
}
void C_VERIFY::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_VERIFY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_VERIFY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_VERIFY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jwt_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_VERIFY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string jwt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_jwt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_VERIFY.jwt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_VERIFY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_VERIFY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string jwt = 1;
  if (!this->jwt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jwt().data(), static_cast<int>(this->_internal_jwt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_VERIFY.jwt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_jwt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_VERIFY)
  return target;
}

size_t C_VERIFY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_VERIFY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string jwt = 1;
  if (!this->jwt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jwt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_VERIFY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_VERIFY)
  GOOGLE_DCHECK_NE(&from, this);
  const C_VERIFY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_VERIFY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_VERIFY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_VERIFY)
    MergeFrom(*source);
  }
}

void C_VERIFY::MergeFrom(const C_VERIFY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_VERIFY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.jwt().empty()) {
    _internal_set_jwt(from._internal_jwt());
  }
}

void C_VERIFY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_VERIFY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_VERIFY::CopyFrom(const C_VERIFY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_VERIFY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_VERIFY::IsInitialized() const {
  return true;
}

void C_VERIFY::InternalSwap(C_VERIFY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &jwt_, GetArenaForAllocation(),
      &other->jwt_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_VERIFY::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class C_MESSAGE::_Internal {
 public:
};

C_MESSAGE::C_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MESSAGE)
}
C_MESSAGE::C_MESSAGE(const C_MESSAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  rommid_ = from.rommid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MESSAGE)
}

void C_MESSAGE::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rommid_ = 0;
}

C_MESSAGE::~C_MESSAGE() {
  // @@protoc_insertion_point(destructor:Protocol.C_MESSAGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_MESSAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_MESSAGE::ArenaDtor(void* object) {
  C_MESSAGE* _this = reinterpret_cast< C_MESSAGE* >(object);
  (void)_this;
}
void C_MESSAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_MESSAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_MESSAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MESSAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  message_.ClearToEmpty();
  rommid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MESSAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rommId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rommid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_MESSAGE.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_MESSAGE.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_MESSAGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MESSAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rommId = 1;
  if (this->rommid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rommid(), target);
  }

  // string nickname = 2;
  if (!this->nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_MESSAGE.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string message = 3;
  if (!this->message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_MESSAGE.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MESSAGE)
  return target;
}

size_t C_MESSAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MESSAGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string message = 3;
  if (!this->message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 rommId = 1;
  if (this->rommid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rommid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_MESSAGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_MESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  const C_MESSAGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_MESSAGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_MESSAGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_MESSAGE)
    MergeFrom(*source);
  }
}

void C_MESSAGE::MergeFrom(const C_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from.message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from.rommid() != 0) {
    _internal_set_rommid(from._internal_rommid());
  }
}

void C_MESSAGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_MESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_MESSAGE::CopyFrom(const C_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MESSAGE::IsInitialized() const {
  return true;
}

void C_MESSAGE::InternalSwap(C_MESSAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, GetArenaForAllocation(),
      &other->nickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(rommid_, other->rommid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MESSAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class S_MESSAGE::_Internal {
 public:
};

S_MESSAGE::S_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MESSAGE)
}
S_MESSAGE::S_MESSAGE(const S_MESSAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  rommid_ = from.rommid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MESSAGE)
}

void S_MESSAGE::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rommid_ = 0;
}

S_MESSAGE::~S_MESSAGE() {
  // @@protoc_insertion_point(destructor:Protocol.S_MESSAGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_MESSAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_MESSAGE::ArenaDtor(void* object) {
  S_MESSAGE* _this = reinterpret_cast< S_MESSAGE* >(object);
  (void)_this;
}
void S_MESSAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_MESSAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_MESSAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MESSAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  message_.ClearToEmpty();
  rommid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MESSAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rommId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rommid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_MESSAGE.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_MESSAGE.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_MESSAGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MESSAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rommId = 1;
  if (this->rommid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rommid(), target);
  }

  // string nickname = 2;
  if (!this->nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_MESSAGE.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string message = 3;
  if (!this->message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_MESSAGE.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MESSAGE)
  return target;
}

size_t S_MESSAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MESSAGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string message = 3;
  if (!this->message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 rommId = 1;
  if (this->rommid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rommid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_MESSAGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_MESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_MESSAGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_MESSAGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_MESSAGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_MESSAGE)
    MergeFrom(*source);
  }
}

void S_MESSAGE::MergeFrom(const S_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from.message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from.rommid() != 0) {
    _internal_set_rommid(from._internal_rommid());
  }
}

void S_MESSAGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_MESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_MESSAGE::CopyFrom(const S_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MESSAGE::IsInitialized() const {
  return true;
}

void S_MESSAGE::InternalSwap(S_MESSAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, GetArenaForAllocation(),
      &other->nickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(rommid_, other->rommid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MESSAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class OBJECT_INFO::_Internal {
 public:
  static const ::Protocol::POSITIONINFO& posinfo(const OBJECT_INFO* msg);
  static const ::Protocol::STATINFO& statinfo(const OBJECT_INFO* msg);
};

const ::Protocol::POSITIONINFO&
OBJECT_INFO::_Internal::posinfo(const OBJECT_INFO* msg) {
  return *msg->posinfo_;
}
const ::Protocol::STATINFO&
OBJECT_INFO::_Internal::statinfo(const OBJECT_INFO* msg) {
  return *msg->statinfo_;
}
OBJECT_INFO::OBJECT_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.OBJECT_INFO)
}
OBJECT_INFO::OBJECT_INFO(const OBJECT_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_posinfo()) {
    posinfo_ = new ::Protocol::POSITIONINFO(*from.posinfo_);
  } else {
    posinfo_ = nullptr;
  }
  if (from._internal_has_statinfo()) {
    statinfo_ = new ::Protocol::STATINFO(*from.statinfo_);
  } else {
    statinfo_ = nullptr;
  }
  objectid_ = from.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.OBJECT_INFO)
}

void OBJECT_INFO::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&posinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objectid_) -
    reinterpret_cast<char*>(&posinfo_)) + sizeof(objectid_));
}

OBJECT_INFO::~OBJECT_INFO() {
  // @@protoc_insertion_point(destructor:Protocol.OBJECT_INFO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OBJECT_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete posinfo_;
  if (this != internal_default_instance()) delete statinfo_;
}

void OBJECT_INFO::ArenaDtor(void* object) {
  OBJECT_INFO* _this = reinterpret_cast< OBJECT_INFO* >(object);
  (void)_this;
}
void OBJECT_INFO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBJECT_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OBJECT_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.OBJECT_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && statinfo_ != nullptr) {
    delete statinfo_;
  }
  statinfo_ = nullptr;
  objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OBJECT_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.OBJECT_INFO.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.POSITIONINFO posInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.STATINFO statinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_statinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBJECT_INFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.OBJECT_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // string name = 2;
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.OBJECT_INFO.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .Protocol.POSITIONINFO posInfo = 3;
  if (this->has_posinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::posinfo(this), target, stream);
  }

  // .Protocol.STATINFO statinfo = 4;
  if (this->has_statinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::statinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.OBJECT_INFO)
  return target;
}

size_t OBJECT_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.OBJECT_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Protocol.POSITIONINFO posInfo = 3;
  if (this->has_posinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posinfo_);
  }

  // .Protocol.STATINFO statinfo = 4;
  if (this->has_statinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statinfo_);
  }

  // int32 objectId = 1;
  if (this->objectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_objectid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBJECT_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.OBJECT_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const OBJECT_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OBJECT_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.OBJECT_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.OBJECT_INFO)
    MergeFrom(*source);
  }
}

void OBJECT_INFO::MergeFrom(const OBJECT_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.OBJECT_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_posinfo()) {
    _internal_mutable_posinfo()->::Protocol::POSITIONINFO::MergeFrom(from._internal_posinfo());
  }
  if (from.has_statinfo()) {
    _internal_mutable_statinfo()->::Protocol::STATINFO::MergeFrom(from._internal_statinfo());
  }
  if (from.objectid() != 0) {
    _internal_set_objectid(from._internal_objectid());
  }
}

void OBJECT_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.OBJECT_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OBJECT_INFO::CopyFrom(const OBJECT_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.OBJECT_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBJECT_INFO::IsInitialized() const {
  return true;
}

void OBJECT_INFO::InternalSwap(OBJECT_INFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OBJECT_INFO, objectid_)
      + sizeof(OBJECT_INFO::objectid_)
      - PROTOBUF_FIELD_OFFSET(OBJECT_INFO, posinfo_)>(
          reinterpret_cast<char*>(&posinfo_),
          reinterpret_cast<char*>(&other->posinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OBJECT_INFO::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class POSITIONINFO::_Internal {
 public:
  using HasBits = decltype(std::declval<POSITIONINFO>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_movedir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_posx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_posy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

POSITIONINFO::POSITIONINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.POSITIONINFO)
}
POSITIONINFO::POSITIONINFO(const POSITIONINFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&posy_) -
    reinterpret_cast<char*>(&state_)) + sizeof(posy_));
  // @@protoc_insertion_point(copy_constructor:Protocol.POSITIONINFO)
}

void POSITIONINFO::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&posy_) -
    reinterpret_cast<char*>(&state_)) + sizeof(posy_));
}

POSITIONINFO::~POSITIONINFO() {
  // @@protoc_insertion_point(destructor:Protocol.POSITIONINFO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void POSITIONINFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void POSITIONINFO::ArenaDtor(void* object) {
  POSITIONINFO* _this = reinterpret_cast< POSITIONINFO* >(object);
  (void)_this;
}
void POSITIONINFO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void POSITIONINFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void POSITIONINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.POSITIONINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&posy_) -
        reinterpret_cast<char*>(&state_)) + sizeof(posy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* POSITIONINFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Protocol.CreatureState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::CreatureState>(val));
        } else goto handle_unusual;
        continue;
      // optional .Protocol.MoveDir moveDir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_movedir(static_cast<::Protocol::MoveDir>(val));
        } else goto handle_unusual;
        continue;
      // optional int32 posX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_posx(&has_bits);
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 posY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_posy(&has_bits);
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* POSITIONINFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.POSITIONINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .Protocol.CreatureState state = 1;
  if (_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // optional .Protocol.MoveDir moveDir = 2;
  if (_internal_has_movedir()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_movedir(), target);
  }

  // optional int32 posX = 3;
  if (_internal_has_posx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_posx(), target);
  }

  // optional int32 posY = 4;
  if (_internal_has_posy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_posy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.POSITIONINFO)
  return target;
}

size_t POSITIONINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.POSITIONINFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .Protocol.CreatureState state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional .Protocol.MoveDir moveDir = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_movedir());
    }

    // optional int32 posX = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_posx());
    }

    // optional int32 posY = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_posy());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void POSITIONINFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.POSITIONINFO)
  GOOGLE_DCHECK_NE(&from, this);
  const POSITIONINFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<POSITIONINFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.POSITIONINFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.POSITIONINFO)
    MergeFrom(*source);
  }
}

void POSITIONINFO::MergeFrom(const POSITIONINFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.POSITIONINFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000002u) {
      movedir_ = from.movedir_;
    }
    if (cached_has_bits & 0x00000004u) {
      posx_ = from.posx_;
    }
    if (cached_has_bits & 0x00000008u) {
      posy_ = from.posy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void POSITIONINFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.POSITIONINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POSITIONINFO::CopyFrom(const POSITIONINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.POSITIONINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POSITIONINFO::IsInitialized() const {
  return true;
}

void POSITIONINFO::InternalSwap(POSITIONINFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(POSITIONINFO, posy_)
      + sizeof(POSITIONINFO::posy_)
      - PROTOBUF_FIELD_OFFSET(POSITIONINFO, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata POSITIONINFO::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class STATINFO::_Internal {
 public:
};

STATINFO::STATINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.STATINFO)
}
STATINFO::STATINFO(const STATINFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalexp_) -
    reinterpret_cast<char*>(&level_)) + sizeof(totalexp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.STATINFO)
}

void STATINFO::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totalexp_) -
    reinterpret_cast<char*>(&level_)) + sizeof(totalexp_));
}

STATINFO::~STATINFO() {
  // @@protoc_insertion_point(destructor:Protocol.STATINFO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void STATINFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STATINFO::ArenaDtor(void* object) {
  STATINFO* _this = reinterpret_cast< STATINFO* >(object);
  (void)_this;
}
void STATINFO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STATINFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STATINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.STATINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalexp_) -
      reinterpret_cast<char*>(&level_)) + sizeof(totalexp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STATINFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxHp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 totalExp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          totalexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STATINFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.STATINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp(), target);
  }

  // int32 maxHp = 3;
  if (this->maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_maxhp(), target);
  }

  // int32 attack = 4;
  if (this->attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_attack(), target);
  }

  // float speed = 5;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed(), target);
  }

  // int32 totalExp = 6;
  if (this->totalexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_totalexp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.STATINFO)
  return target;
}

size_t STATINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.STATINFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 hp = 2;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 maxHp = 3;
  if (this->maxhp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxhp());
  }

  // int32 attack = 4;
  if (this->attack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attack());
  }

  // float speed = 5;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 totalExp = 6;
  if (this->totalexp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalexp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STATINFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.STATINFO)
  GOOGLE_DCHECK_NE(&from, this);
  const STATINFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STATINFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.STATINFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.STATINFO)
    MergeFrom(*source);
  }
}

void STATINFO::MergeFrom(const STATINFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.STATINFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.maxhp() != 0) {
    _internal_set_maxhp(from._internal_maxhp());
  }
  if (from.attack() != 0) {
    _internal_set_attack(from._internal_attack());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.totalexp() != 0) {
    _internal_set_totalexp(from._internal_totalexp());
  }
}

void STATINFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.STATINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STATINFO::CopyFrom(const STATINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.STATINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STATINFO::IsInitialized() const {
  return true;
}

void STATINFO::InternalSwap(STATINFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STATINFO, totalexp_)
      + sizeof(STATINFO::totalexp_)
      - PROTOBUF_FIELD_OFFSET(STATINFO, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STATINFO::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class SkillInfo::_Internal {
 public:
};

SkillInfo::SkillInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.SkillInfo)
}
SkillInfo::SkillInfo(const SkillInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  skillid_ = from.skillid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.SkillInfo)
}

void SkillInfo::SharedCtor() {
skillid_ = 0;
}

SkillInfo::~SkillInfo() {
  // @@protoc_insertion_point(destructor:Protocol.SkillInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SkillInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SkillInfo::ArenaDtor(void* object) {
  SkillInfo* _this = reinterpret_cast< SkillInfo* >(object);
  (void)_this;
}
void SkillInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SkillInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SkillInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.SkillInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skillid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skillId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SkillInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.SkillInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skillId = 1;
  if (this->skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_skillid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.SkillInfo)
  return target;
}

size_t SkillInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.SkillInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 skillId = 1;
  if (this->skillid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skillid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkillInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.SkillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkillInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.SkillInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.SkillInfo)
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.SkillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skillid() != 0) {
    _internal_set_skillid(from._internal_skillid());
  }
}

void SkillInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.SkillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.SkillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {
  return true;
}

void SkillInfo::InternalSwap(SkillInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(skillid_, other->skillid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER_GAME* Arena::CreateMaybeMessage< ::Protocol::C_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER_GAME* Arena::CreateMaybeMessage< ::Protocol::S_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CREATE_ROOM* Arena::CreateMaybeMessage< ::Protocol::C_CREATE_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CREATE_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CREATE_ROOM* Arena::CreateMaybeMessage< ::Protocol::S_CREATE_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CREATE_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ROOM_LIST* Arena::CreateMaybeMessage< ::Protocol::C_ROOM_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ROOM_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LEAVE_GAME* Arena::CreateMaybeMessage< ::Protocol::S_LEAVE_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWN* Arena::CreateMaybeMessage< ::Protocol::S_SPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DESPAWN* Arena::CreateMaybeMessage< ::Protocol::S_DESPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MOVE* Arena::CreateMaybeMessage< ::Protocol::C_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MOVE* Arena::CreateMaybeMessage< ::Protocol::S_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SKILL* Arena::CreateMaybeMessage< ::Protocol::C_SKILL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SKILL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SKILL* Arena::CreateMaybeMessage< ::Protocol::S_SKILL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SKILL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHANGEHP* Arena::CreateMaybeMessage< ::Protocol::S_CHANGEHP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHANGEHP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DIE* Arena::CreateMaybeMessage< ::Protocol::S_DIE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DIE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_VERIFY* Arena::CreateMaybeMessage< ::Protocol::S_VERIFY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_VERIFY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_VERIFY* Arena::CreateMaybeMessage< ::Protocol::C_VERIFY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_VERIFY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MESSAGE* Arena::CreateMaybeMessage< ::Protocol::C_MESSAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MESSAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MESSAGE* Arena::CreateMaybeMessage< ::Protocol::S_MESSAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MESSAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::OBJECT_INFO* Arena::CreateMaybeMessage< ::Protocol::OBJECT_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::OBJECT_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::POSITIONINFO* Arena::CreateMaybeMessage< ::Protocol::POSITIONINFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::POSITIONINFO >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::STATINFO* Arena::CreateMaybeMessage< ::Protocol::STATINFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::STATINFO >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::SkillInfo* Arena::CreateMaybeMessage< ::Protocol::SkillInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::SkillInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
